import fitz  # PyMuPDF
import pytesseract
from pdf2image import convert_from_bytes
import re
import streamlit as st
from docxtpl import DocxTemplate
import os

# Ch·ªâ ƒë·ªãnh ƒë∆∞·ªùng d·∫´n Tesseract
pytesseract.pytesseract.tesseract_cmd = "/usr/bin/tesseract"
POPPLER_PATH = "/usr/bin"  # ƒê∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh tr√™n Linux

st.title("üìú Tr√≠ch xu·∫•t th√¥ng tin th·ª≠a ƒë·∫•t t·ª´ PDF scanner")

# H√†m tr√≠ch xu·∫•t vƒÉn b·∫£n t·ª´ PDF scan
def extract_text_from_scanned_pdf(pdf_bytes):
    images = convert_from_bytes(pdf_bytes.read(), poppler_path=POPPLER_PATH)
    extracted_text = ""
    for img in images:
        text = pytesseract.image_to_string(img, lang="vie")  # OCR ti·∫øng Vi·ªát
        extracted_text += text + "\n"
    return extracted_text

# H√†m tr√≠ch xu·∫•t th√¥ng tin th·ª≠a ƒë·∫•t
def extract_land_info(text):
    thua_so = re.search(r"Th·ª≠a ƒë·∫•t s·ªë:\s*(\d+)", text, re.IGNORECASE)
    to_ban_do_so = re.search(r"t·ªù b·∫£n ƒë·ªì s·ªë:\s*(\d+)", text, re.IGNORECASE)
    dien_tich = re.search(r"Di·ªán t√≠ch:\s*([\d.,]+)\s*m¬≤?", text, re.IGNORECASE)
    loai_dat = re.search(r"Lo·∫°i ƒë·∫•t:\s*(.*)", text, re.IGNORECASE)
    hinh_thuc_su_dung = re.search(r"H√¨nh th·ª©c s·ª≠ d·ª•ng ƒë·∫•t:\s*(.*)", text, re.IGNORECASE)
    dia_chi = re.search(r"ƒê·ªãa ch·ªâ   :\s*(.*)", text, re.IGNORECASE)
    thoi_han_su_dung = re.search(r"Th·ªùi h·∫°n:\s*(.*)", text, re.IGNORECASE)
    nguon_goc_su_dung = re.search(r"Ngu·ªìn g·ªëc s·ª≠ d·ª•ng:\s*(.*)", text, re.IGNORECASE)
    nguoi_su_dung = re.search(r"Ng∆∞·ªùi s·ª≠ d·ª•ng ƒë·∫•t, ch·ªß s·ªü h·ªØu t√†i s·∫£n g·∫Øn li·ªÅn v·ªõi ƒë·∫•t:\s*(.*)", text, re.IGNORECASE)
    thoi_diem_dang_ky = re.search(r"Th·ªùi ƒëi·ªÉm ƒëƒÉng k√Ω v√†o s·ªï ƒë·ªãa ch√≠nh:\s*(.*)", text, re.IGNORECASE)
    so_phat_hanh_GCN = re.search(r"S·ªë ph√°t h√†nh Gi·∫•y ch·ª©ng nh·∫≠n:\s*(.*)", text, re.IGNORECASE)
    so_vao_so_cap_GCN = re.search(r"S·ªë v√†o s·ªï c·∫•p Gi·∫•y ch·ª©ng nh·∫≠n:\s*(.*)", text, re.IGNORECASE)
    thoi_diem_dang_ky_GCN = re.search(r"Th·ªùi ƒëi·ªÉm ƒëƒÉng k√Ω:\s*(.*)", text, re.IGNORECASE)
    noi_dung = re.search(r"Ghi ch√∫:\s*(.*)", text, re.IGNORECASE)

    # Tr·∫£ v·ªÅ d·ªØ li·ªáu ho·∫∑c "Kh√¥ng t√¨m th·∫•y" n·∫øu kh√¥ng c√≥ gi√° tr·ªã
    return {
        "SoThua": thua_so.group(1) if thua_so else "Kh√¥ng t√¨m th·∫•y",
        "SoToBanDo": to_ban_do_so.group(1) if to_ban_do_so else "Kh√¥ng t√¨m th·∫•y",
        "DienTich": dien_tich.group(1) if dien_tich else "Kh√¥ng t√¨m th·∫•y",
        "LoaiDat": loai_dat.group(1) if loai_dat else "Kh√¥ng t√¨m th·∫•y",
        "HinhThucSuDung": hinh_thuc_su_dung.group(1) if hinh_thuc_su_dung else "Kh√¥ng t√¨m th·∫•y",
        "DiaChi": dia_chi.group(1) if dia_chi else "Kh√¥ng t√¨m th·∫•y",
        "ThoiHanSuDung": thoi_han_su_dung.group(1) if thoi_han_su_dung else "Kh√¥ng t√¨m th·∫•y",
        "NguonGocSuDung": nguon_goc_su_dung.group(1) if nguon_goc_su_dung else "Kh√¥ng t√¨m th·∫•y",
        "NguoiSuDung": nguoi_su_dung.group(1) if nguoi_su_dung else "Kh√¥ng t√¨m th·∫•y",
        "ThoiDiemDangKy": thoi_diem_dang_ky.group(1) if thoi_diem_dang_ky else "Kh√¥ng t√¨m th·∫•y",
        "SoPhatHanhGCN": so_phat_hanh_GCN.group(1) if so_phat_hanh_GCN else "Kh√¥ng t√¨m th·∫•y",
        "SoVaoSoCapGCN": so_vao_so_cap_GCN.group(1) if so_vao_so_cap_GCN else "Kh√¥ng t√¨m th·∫•y",
        "ThoiDiemDangKyGCN": thoi_diem_dang_ky_GCN.group(1) if thoi_diem_dang_ky_GCN else "Kh√¥ng t√¨m th·∫•y",
        "NoiDung": noi_dung.group(1) if noi_dung else "Kh√¥ng t√¨m th·∫•y"
    }

# H√†m ƒëi·ªÅn th√¥ng tin v√†o template DOCX
def fill_template_with_data(template_path, land_info):
    doc = DocxTemplate(template_path)
    
    # Thay th·∫ø c√°c placeholder trong template b·∫±ng d·ªØ li·ªáu
    context = {key: value for key, value in land_info.items()}
    doc.render(context)

    # L∆∞u file DOCX ƒë√£ ƒëi·ªÅn th√¥ng tin
    output_path = "output_land_info.docx"
    doc.save(output_path)
    return output_path

# Upload file
uploaded_file = st.file_uploader("üìÇ Ch·ªçn file PDF", type=["pdf"])

if uploaded_file:
    text = extract_text_from_scanned_pdf(uploaded_file)
    land_info = extract_land_info(text)

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.subheader("üè† Th√¥ng tin th·ª≠a ƒë·∫•t:")
    for key, value in land_info.items():
        # N·∫øu kh√¥ng t√¨m th·∫•y, t·∫°o √¥ nh·∫≠p li·ªáu cho ng∆∞·ªùi d√πng
        if value == "Kh√¥ng t√¨m th·∫•y":
            land_info[key] = st.text_input(f"Nh·∫≠p {key}:", "")
        st.write(f"**{key}:** {land_info[key]}")

    # Hi·ªÉn th·ªã to√†n b·ªô vƒÉn b·∫£n OCR
    st.subheader("üìÑ N·ªôi dung OCR:")
    st.text_area("N·ªôi dung nh·∫≠n di·ªán:", text, height=300)

    # Th√™m n√∫t xu·∫•t file DOCX
    if st.button("üì• Xu·∫•t file DOCX"):
        template_path = "template.docx"  # ƒê·∫£m b·∫£o r·∫±ng template.docx c√≥ trong th∆∞ m·ª•c hi·ªán t·∫°i
        docx_file = fill_template_with_data(template_path, land_info)
        st.download_button(
            label="T·∫£i file DOCX",
            data=open(docx_file, "rb").read(),
            file_name=docx_file,
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
